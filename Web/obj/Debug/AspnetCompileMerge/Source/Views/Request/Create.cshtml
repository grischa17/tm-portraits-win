@model TuRM.Portrait.ViewModels.Request.Create

@{
    ViewBag.Title = "Create";
}

<div class="container">

    <h2>Anfrage</h2>

    <h4>Daten zur Anfrage angeben</h4>
    <hr />

    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-md-offset-2 col-md-4">
                @if (DateTime.Now < new DateTime(2017, 4, 1))
                {
                    <span class="control-label">Gesamtbetrag:</span>
                            <h5 style="color:red;line-height:1">Nur noch bis zum 31.03 zum halben Preis:</h5>
                }
                else
                {
                    <span class="control-label">Gesamtbetrag:</span>
                }
            </div>
            <div class="col-md-6">
                <span id="TotalAmount" class="control-label"
                      @if (DateTime.Now < new DateTime(2017, 4, 1)) { <text> style="text-decoration: line-through;" </text>     }>@($"{Model.TotalAmount:C}")</span>
                    @if (DateTime.Now < new DateTime(2017, 4, 1))
                    {
                        <h2 style="color:red;" id="ActionAmount">@($"{Model.TotalAmount * 0.5:C}")</h2>
                    }
                </div>
            </div>
    </div>

    @using (Html.BeginForm("AddFile", "Request", FormMethod.Post, new { enctype = "multipart/form-data", id = "fileUploadForm" }))
    {
        <div class="form-horizontal">
            <div class="form-group">
                @Html.LabelFor(model => model.Files, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <!-- The fileinput-button span is used to style the file input field as button -->
                    <label class="btn btn-default btn-file">
                        <span class="glyphicon glyphicon-upload" aria-hidden="true"></span>
                        <span>Datei hochladen...</span>
                        <!-- The file input field used as target for the file upload widget -->
                        <input id="Files" name="Files" type="file" accept=".gif,.jpg,.jpeg,.png,.bpm,.tiff" />
                    </label>
                    @Html.ValidationMessageFor(model => model.Files, "", new { @class = "text-danger" })
                    <!-- The container for the uploaded files -->
                    <div id="files" class="row"></div>
                </div>
            </div>
        </div>

    }

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()


            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        <div class="btn-group" data-toggle="buttons">
                            <label class="btn btn-default active">
                                <input type="radio" name="@Html.NameFor(model => model.ProductId)" id="0" value="0" autocomplete="off" checked> Bleistiftporträt
                            </label>
                            <label class="btn btn-default">
                                <input type="radio" name="@Html.NameFor(model => model.ProductId)" id="1" value="1" autocomplete="off"> Buntstiftporträt
                            </label>
                            <label class="btn btn-default">
                                <input type="radio" name="@Html.NameFor(model => model.ProductId)" id="2" value="2" autocomplete="off"> Pastellporträt
                            </label>
                        </div>
                        @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6 col-md-offset-1 col-lg-offset-1">
                        <span id="ProductPrice" name="ProductPrice">60,00 €</span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CountSubjects, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        <div class="btn-group" data-toggle="buttons">
                            <label class="btn btn-default active">
                                <input type="radio" name="@Html.NameFor(model => model.CountSubjects)" id="1" value="1" autocomplete="off" checked> 1
                            </label>
                            <label class="btn btn-default">
                                <input type="radio" name="@Html.NameFor(model => model.CountSubjects)" id="2" value="2" autocomplete="off"> 2
                            </label>
                            <label class="btn btn-default">
                                <input type="radio" name="@Html.NameFor(model => model.CountSubjects)" id="3" value="3" autocomplete="off"> 3
                            </label>
                            <label class="btn btn-default">
                                <input type="radio" name="@Html.NameFor(model => model.CountSubjects)" id="4" value="4" autocomplete="off"> 4
                            </label>
                            <label class="btn btn-default">
                                <input type="radio" name="@Html.NameFor(model => model.CountSubjects)" id="5" value="5" autocomplete="off"> 5
                            </label>
                        </div>
                        @Html.ValidationMessageFor(model => model.CountSubjects, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        +&nbsp;<span id="SubjectPrice" name="SubjectPrice">@($"{((Model.CountSubjects - 1) * 20f):C}")</span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SizeId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        <div class="btn-group" data-toggle="buttons">
                            <label class="btn btn-default active">
                                <input type="radio" name="@Html.NameFor(model => model.SizeId)" id="0" value="0" autocomplete="off" checked> A4
                            </label>
                            <label class="btn btn-default">
                                <input type="radio" name="@Html.NameFor(model => model.SizeId)" id="1" value="1" autocomplete="off"> A3
                            </label>
                            <label class="btn btn-default">
                                <input type="radio" name="@Html.NameFor(model => model.SizeId)" id="2" value="2" autocomplete="off"> A2
                            </label>
                        </div>
                        @Html.ValidationMessageFor(model => model.SizeId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        +&nbsp;<span id="SizePrice" name="SizePrice">0,00 €</span>
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FirstName, new
           {
               htmlAttributes = new
               {
                   @class = "form-control",
                   placeholder = "Pflichtfeld",
                   maxlength = 64
               }
           })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LastName, new
           {
               htmlAttributes = new
               {
                   @class = "form-control",
                   placeholder = "Pflichtfeld",
                   maxlength = 64
               }
           })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.StreetPostOfficeBox, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="row">
                            <div class="col-sm-9 col-xs-8">
                                @Html.EditorFor(model => model.StreetPostOfficeBox, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           maxlength = 64
                       }
                   })
                            </div>
                            <div class="col-sm-3 col-xs-4">
                                @Html.EditorFor(model => model.HouseNumber, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           maxlength = 8
                       }
                   })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.ValidationMessageFor(model => model.StreetPostOfficeBox, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="row">
                            <div class="col-sm-3 col-xs-4">
                                @Html.EditorFor(model => model.PostalCode, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           placeholder = "Pflichtfeld",
                           maxlength = 16
                       }
                   })
                            </div>
                            <div class="col-sm-9 col-xs-8">
                                @Html.EditorFor(model => model.City, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           placeholder = "Pflichtfeld",
                           maxlength = 64
                       }
                   })
                            </div>

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new
           {
               htmlAttributes = new
               {
                   @class = "form-control",
                   placeholder = "Pflichtfeld",
                   maxlength = 256
               }
           })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Remarks, new
           {
               htmlAttributes = new
               {
                   @class = "form-control",
                   maxlength = 256
               }
           })
                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-2">
                        <button type="submit" class="btn btn-primary" disabled>
                            Bestellen <span class="glyphicon glyphicon-send" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
            </div>
    }
</div>

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@

    <script type="text/javascript" async>

        $('input[name="CountSubjects"]').change(function (e) {
            $('#SubjectValue').text(e.target.id);
            $('#SubjectPrice').text(((e.target.id - 1) * 20) + ',00 €');
            setTimeout(setTotal(e.target.id, null));

        });

        $('input[name="SizeId"]').change(function (e) {
            $('#SizePrice').text(getSizePrice(e.target.id) + ',00 €');
            setTimeout(setTotal(null, e.target.id));
        });


        $('input[name=ProductId]').change(function(e){

            $('#ProductPrice').text(60 + 20 * e.target.id + ',00 €');
            setTotal($('#SubjectValue').val(), $('#SizeValue').val());
        });

        var maxFileSize = @Model.MaxFileSize * 1024,
            fileCounter = 0;
        $('document').ready(function(){

            $('input[type=file]').change(function(e){
                var oReader;
                var vFD = new FormData();

                if (!e.target.files[0]) {
                    return;
                }

                if (e.target.files[0].size > maxFileSize)
                {
                    $("[data-valmsg-for='Files']").text("Die Datei darf nicht größer als @($" {Model.MaxFileSize / 1024:F1}") MB sein");
                    return;
                }else {
                    $("[data-valmsg-for='Files']").text("");
                }

                oReader = new FileReader();

                $('#files').append(
                    '<div class="col-md-2">' +
                        '<img id="' + fileCounter + '" width="100" />' +
                        '<button id="' + fileCounter + 'close" type="button" class="close" aria-label="Schließen">' +
                            '<span aria-hidden="true">&times;</span>' +
                        '</button>' +
                        '<div class="progress">'+
                            '<div id="' + fileCounter + 'progress" class="progress-bar progress-bar-success" aria-valuemin="0" aria-valuemax="100"></div>' +
                        '</div>' +
                    '</div>'
                );

                $('#' + fileCounter + 'close').click(function(e){
                    var id = this.id.replace('close', '');
                    var oXHR = new XMLHttpRequest();
                    var data = new FormData();

                    this.parentElement.parentElement.removeChild(this.parentElement);

                    oXHR.open('POST', 'RemoveFile');
                    data.append('id', id);
                    oXHR.send(data);

                });

                oReader.onload = function(e){
                    var oImage;
                    oImage = getNext();

                    // e.target.result contains the DataURL which we will use as a source of the image
                    oImage.src = e.target.result;
                    oImage.state = 1;

                };

                // read selected file as DataURL
                oReader.readAsDataURL(e.target.files[0]);
                vFD.append(e.target.files[0].name, e.target.files[0]);
                console.info(e.target.files[0].name);

                ++fileCounter;

                //// create XMLHttpRequest object, adding few event listeners, and POSTing our data
                var oXHR = new XMLHttpRequest();
                oXHR.progressbar = $('#' + (fileCounter - 1) + 'progress')[0];
                oXHR.onprogress = function(e){
                    //console.info('Geladen:' + e.loaded + ' Total:' + $('input[type=file]')[0].files[0].size);
                    this.progressbar.setAttribute('aria-valuenow', e.loaded * 100 / $('input[type=file]')[0].files[0].size);
                };
                oXHR.onloadend = function(e){
                    if (e.target.status == 200) {
                        oXHR.progressbar.parentElement.parentElement.removeChild(oXHR.progressbar.parentElement);
                        $('button[type=submit]')[0].disabled = false;

                    }else {
                        var id = oXHR.progressbar.id;

                        id = '#' + id.replace('progress', 'msg');
                        $(id).html(e.target.response);

                    }
                };
                oXHR.onerror = function(e){
                    var id = oXHR.progressbar.id;

                    id = '#' + id.replace('progress', 'msg');
                    $(id).text(e.error);
                };
                oXHR.onabort = function(e){
                    var id = oXHR.progressbar.id;

                    id = '#' + id.replace('progress', 'msg');
                    $(id).text(e.error);
                };
                oXHR.open('POST', 'AddFile');
                oXHR.vFD = vFD;
                setTimeout(function(e){
                    try {
                        e.send(e.vFD);
                    } catch (e) {
                        var id = e.progressbar.id;

                        id = '#' + id.replace('progress', 'msg');
                        $(id).text(e.error);
                    }
                },
                1,
                oXHR);

            });
        });

        function getNext(state){
            var images = $('img');

            for (var i = 0; i < images.length; i++) {
                if (images[i].state == state) {
                    return images[i];
                }
            }
        }

        function getSizePrice(){
            var id = $('input[name=SizeId]:checked')[0].id;

            return id * 30;
        }

        function getProductPrice(){
            var id = $('input[name=ProductId]:checked')[0].id;

            return 60 + 20 * id;
        }

        function setTotal(countSubjects, sizeValue){
            if (!countSubjects) {
                countSubjects = $('input[name="CountSubjects"]:checked')[0].id;
            }

            sizeValue = getSizePrice(sizeValue);

            $('#TotalAmount').text(((countSubjects - 1) * 20 +
                                    sizeValue +
                                    getProductPrice()) + ',00 €');
            @{
                if (DateTime.Now < new DateTime(2017, 4, 1))
                {
            <text>$('#ActionAmount').text(((countSubjects - 1) * 20 +
                                    sizeValue +
                                    getProductPrice())*0.5 + ',00 €');</text>
                }
            }
        }
    </script>
}
